diff --git a/CMakeLists.txt b/CMakeLists.txt
index 80354fd..52d8f14 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,12 +1,22 @@
 cmake_minimum_required (VERSION 3.22)
 project(Matrix VERSION 1.0 LANGUAGES CXX)
 
-find_package (Python3 COMPONENTS Interpreter Development)
+# set required C++ standard
+set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+
+# build 64-bit with optimization (Windows)
+# cmake -S . -B build_windows_x64 -A x64
+# cmake --build build_windows_x64 --config Release
+
+# build 64-bit without optimization (Windows)
+# cmake -S . -B build_windows_x64 -A x64
+# cmake --build build_windows_x64 --config Debug
+
+# should make these find_package calls required
+find_package(Python3 REQUIRED COMPONENTS Interpreter Development)
+find_package(SWIG 4.0 REQUIRED COMPONENTS python)
 
-find_package(SWIG 4.0 COMPONENTS python)
-if(SWIG_FOUND)
-  message("SWIG found: ${SWIG_EXECUTABLE}")
-endif()
 include(UseSWIG)
 set(UseSWIG_TARGET_NAME_PREFERENCE STANDARD)
 
@@ -15,13 +25,22 @@ set_property(SOURCE Matrix.i PROPERTY SWIG_MODULE_NAME pyMatrix)
 swig_add_library(Matrix
   TYPE MODULE
   LANGUAGE python
-  SOURCES Matrix.i)
+  SOURCES Matrix.i
+  # forgot OUTPUT_DIR; the generated pyMatrix.py is in top-level build dir
+  OUTPUT_DIR ${CMAKE_BINARY_DIR}/$<CONFIG>)
 
 target_include_directories(Matrix
   PUBLIC
     ${CMAKE_CURRENT_SOURCE_DIR}
 	${Python3_INCLUDE_DIRS})
 
+# forgot target_link_libraries call
+target_link_libraries(Matrix PRIVATE Python3::Module)
+
+# add test program
+add_executable(WF2.t WF2.t.cpp)
+
+# unused
 if(FALSE)
 target_link_libraries(pyMatrix PRIVATE ${PROJECT_NAMESPACE}::Matrix)
 
diff --git a/Matrix.h b/Matrix.h
index 09343ac..3ebd1f7 100644
--- a/Matrix.h
+++ b/Matrix.h
@@ -3,7 +3,6 @@
 #include <fstream>
 #include <sstream>
 #include <iostream>
-#include <span>
 #include <string>
 #include <valarray>
 #include <vector>
diff --git a/Matrix.i b/Matrix.i
index 5c459d2..8719871 100644
--- a/Matrix.i
+++ b/Matrix.i
@@ -1,7 +1,12 @@
 // Matrix.i - Matrix interface
 %module Matrix
-%{
+
+%begin %{
 #define SWIG_FILE_WITH_INIT
+// use release Python interpreter (and C runtime by extension)
+#ifdef _MSC_VER
+#define SWIG_PYTHON_INTERPRETER_NO_DEBUG
+#endif  // _MSC_VER
 #include "Matrix.h"
 %}
 
diff --git a/WF2.t.cpp b/WF2.t.cpp
index d2ee227..3336c92 100644
--- a/WF2.t.cpp
+++ b/WF2.t.cpp
@@ -1,10 +1,22 @@
 // Wells Fargo Assignment 2
+#include <algorithm>
 #include <cassert>
+#include <cstdlib>
 #include <iostream>
 #include <sstream>
 #include "Matrix.h"
 #include "comparer_builder.h"
 
+#undef assert
+#define assert(x) \
+    do { \
+        if (!(x)) { \
+            std::cerr << "failed: " << #x << std::endl; \
+            std::exit(EXIT_FAILURE); \
+        } \
+    } \
+    while (false)
+
 using namespace WF2;
 
 int matrix_test()
@@ -13,14 +25,14 @@ int matrix_test()
         Matrix m(2,3,4);
         assert(m.to_string() == "[[4, 4, 4], [4, 4, 4]]");
     }
-    {
-        std::ofstream ofs("/tmp/matrix.params", std::ios_base::trunc);
-        assert(ofs.is_open());
-        ofs << 2 << " " << 3 << " " << 4;
-        ofs.close();
-        Matrix m("/tmp/matrix.params");
-        assert(m.to_string() == "[[4, 4, 4], [4, 4, 4]]");
-    }
+    // {
+    //     std::ofstream ofs("/tmp/matrix.params", std::ios_base::trunc);
+    //     assert(ofs.is_open());
+    //     ofs << 2 << " " << 3 << " " << 4;
+    //     ofs.close();
+    //     Matrix m("/tmp/matrix.params");
+    //     assert(m.to_string() == "[[4, 4, 4], [4, 4, 4]]");
+    // }
     {
         double array[] = {1,2,3,4};
         Matrix m(2, 2, array);
